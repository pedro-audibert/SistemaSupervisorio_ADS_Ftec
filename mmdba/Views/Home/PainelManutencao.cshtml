@*
=========================================================================================================
ARQUIVO: Views/Home/PainelManutencao.cshtml
FUNÇÃO:  Exibe o status em tempo real de todas as Entradas e Saídas (IOs) do sistema.
=========================================================================================================
*@

@{
    ViewData["Title"] = "Painel de Manutenção";
}

<div class="container-fluid my-4">
    <h1 class="mb-3 text-center">Painel de Manutenção</h1>
    <p class="text-center">Painel de Manutenção - Status de IOs e dados em Tempo Real.</p>

    <div id="statusConexao" class="alert alert-info alert-status text-center">
        Conectando ao servidor...
    </div>

    <div class="row mb-4">
        <div class="col-md-6" id="containerEntradasDigitais"></div>
        <div class="col-md-6" id="containerSaidasDigitais"></div>
    </div>
    <div class="row mb-4">
        <div class="col-md-6" id="containerEntradasAnalogicas"></div>
        <div class="col-md-6" id="containerSaidasAnalogicas"></div>
    </div>
    <div class="row mb-4">
        <div class="col-md-6" id="containerEntradasRapidas"></div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // O script é envolvido por uma IIFE (Immediately Invoked Function Expression)
        // para criar um escopo privado e seguro, evitando poluir o escopo global.
        (function () {
            // ===================================================================================
            // BLOCO 1: CONFIGURAÇÃO CENTRAL DE IOs
            // Esta seção para adicionar ou remover um IO,
            // ===================================================================================
            const entradasDigitais = [
                { id: 'Local:1:I.Data.0', endereco: 'I00', descricao: 'Chave de Segurança' },
                { id: 'Local:1:I.Data.1', endereco: 'I01', descricao: 'Botão de Emergência' },
                { id: 'Local:1:I.Data.2', endereco: 'I02', descricao: 'Botão Partida' },
                { id: 'Local:1:I.Data.3', endereco: 'I03', descricao: 'Botão Parada' },
                { id: 'Local:1:I.Data.4', endereco: 'I04', descricao: 'Sensor Falta de Rótulos' },
                { id: 'Local:1:I.Data.5', endereco: 'I05', descricao: 'Sensor Rótulo Sobressalente' },
                { id: 'Local:1:I.Data.6', endereco: 'I06', descricao: 'Sensor Faca na Posição' },
                { id: 'Local:1:I.Data.7', endereco: 'I07', descricao: 'Sensor Acúmulo Entrada' },
                { id: 'Local:1:I.Data.8', endereco: 'I08', descricao: 'Sensor Acúmulo Saída' },
                { id: 'Local:1:I.Data.9', endereco: 'I09', descricao: 'Sensor Parada Entrada' },
                { id: 'Local:1:I.Data.10', endereco: 'I10', descricao: 'Sensor Parada Saída' },
                { id: 'Local:1:I.Data.11', endereco: 'I11', descricao: 'Pressostato' },
                { id: 'Local:1:I.Data.12', endereco: 'I12', descricao: 'Botão Reset' },
                { id: 'Local:1:I.Data.13', endereco: 'I13', descricao: 'Controle de Temperatura' },
                { id: 'Local:1:I.Data.14', endereco: 'I14', descricao: 'Sensor Presença de Garrafas' },
                { id: 'Local:1:I.Data.15', endereco: 'I15', descricao: 'Joggin' },
            ];

            const saidasDigitais = [
                { id: 'Local:1:O.Data.0', endereco: 'Q00', descricao: 'Máquina em Operação' },
                { id: 'Local:1:O.Data.1', endereco: 'Q01', descricao: 'Aviso Sonoro' },
                { id: 'Local:1:O.Data.2', endereco: 'Q02', descricao: 'Máquina em Falha' },
                { id: 'Local:1:O.Data.3', endereco: 'Q03', descricao: 'Válvula Bloqueio' },
                { id: 'Local:1:O.Data.4', endereco: 'Q04', descricao: 'Válvula Coleiro' },
                { id: 'Local:1:O.Data.5', endereco: 'Q05', descricao: 'Válvula Corte' },
                { id: 'Local:1:O.Data.6', endereco: 'Q06', descricao: 'Válvula Tração' },
                { id: 'Local:1:O.Data.7', endereco: 'Q07', descricao: 'Bomba de Vácuo' },
                { id: 'Local:1:O.Data.8', endereco: 'Q08', descricao: 'Reset Drive Tração' },
                { id: 'Local:1:O.Data.9', endereco: 'Q09', descricao: 'Válvula Trava Freio' },
                { id: 'Local:1:O.Data.10', endereco: 'Q10', descricao: 'Válvula Freio' },
                { id: 'Local:1:O.Data.11', endereco: 'Q11', descricao: 'Lâmpada Reset' },
                { id: 'Local:1:O.Data.12', endereco: 'Q12', descricao: 'Saída Reserva Q12' },
                { id: 'Local:1:O.Data.13', endereco: 'Q13', descricao: 'Saída Reserva Q13' },
                { id: 'Local:1:O.Data.14', endereco: 'Q14', descricao: 'Saída Reserva Q14' },
                { id: 'Local:1:O.Data.15', endereco: 'Q15', descricao: 'Saída Reserva Q15' },
            ];

            const entradasAnalogicas = [
                { id: 'Local:2:I.Ch0Data', endereco: 'IW0', descricao: 'Posição Balancin Freio' },
                { id: 'Local:2:I.Ch1Data', endereco: 'IW1', descricao: 'Entrada Reserva IW1' },
                { id: 'Local:2:I.Ch2Data', endereco: 'IW2', descricao: 'Entrada Reserva IW2' },
                { id: 'Local:2:I.Ch3Data', endereco: 'IW3', descricao: 'Entrada Reserva IW3' },
            ];

            const saidasAnalogicas = [
                { id: 'Local:2:O.Ch0Data', endereco: 'QW0', descricao: 'Pressão Freio Desbobinador' },
                { id: 'Local:2:O.Ch1Data', endereco: 'QW1', descricao: 'Saída Reserva QW1' },
            ];

            const entradasRapidas = [
                { id: 'Local:3:I.Ctr0CurrentCount', endereco: 'HSC00', descricao: 'Encoder Mestre' },
                { id: 'Local:3:I.Ctr1CurrentCount', endereco: 'HSC01', descricao: 'Entrada Rápida Reserva HSC01' },
                { id: 'Local:3:I.Ctr2CurrentCount', endereco: 'HSC02', descricao: 'Entrada Rápida Reserva HSC02' },
                { id: 'Local:3:I.Ctr3CurrentCount', endereco: 'HSC03', descricao: 'Entrada Rápida Reserva HSC03' },
            ];

            // ===================================================================================
            // BLOCO 2: FUNÇÕES DE GERAÇÃO E ATUALIZAÇÃO DA INTERFACE (UI)
            // Funções responsáveis por manipular o DOM (Document Object Model).
            // ===================================================================================

            /** Gera uma tabela completa de IOs e a insere em um container específico. */
            function gerarTabela(containerId, titulo, cabecalhos, dados) {
                const container = document.getElementById(containerId);
                if (!container) {
                    console.error(`Container com ID '${containerId}' não encontrado.`);
                    return;
                }
                // Mapeia o array de dados para um string de HTML com as linhas da tabela.
                const linhasHtml = dados.map(item => `
                    <tr>
                        <td>${item.endereco}</td>
                        <td>${item.descricao}</td>
                        <td id="${item.id}" class="fw-bold">Desconhecido</td>
                    </tr>
                `).join('');

                // Injeta o HTML completo da tabela no container.
                container.innerHTML = `
                    <h4 class="text-center">${titulo}</h4>
                    <table class="table table-bordered table-sm">
                        <thead class="thead-dark text-center">
                            <tr><th>${cabecalhos[0]}</th><th>${cabecalhos[1]}</th><th>${cabecalhos[2]}</th></tr>
                        </thead>
                        <tbody class="text-center">${linhasHtml}</tbody>
                    </table>`;
            }

            /** Atualiza o valor e a cor de um elemento (célula da tabela) na tela. */
            function atualizarElemento(id, valor) {
                const elemento = document.getElementById(id);
                if (!elemento) return; // Se o elemento não for encontrado na tela, ignora.

                // Trata valores booleanos (ON/OFF) de forma diferente dos numéricos.
                if (typeof valor === 'boolean') {
                    elemento.textContent = valor ? "ON" : "OFF";
                    elemento.className = valor ? "bg-success text-white fw-bold" : "bg-danger text-white fw-bold";
                } else {
                    elemento.textContent = valor;
                    elemento.className = "fw-bold"; // Garante que o estilo padrão seja reaplicado para valores não-booleanos.
                }
            }

            // ===================================================================================
            // BLOCO 3: LÓGICA DE CONEXÃO E INICIALIZAÇÃO DO SIGNALR
            // ===================================================================================
            async function iniciarConexaoSignalR() {
                const statusDiv = document.getElementById("statusConexao");
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/iosHub") // Aponta para o Hub de IOs no servidor.
                    .withAutomaticReconnect() // Tenta reconectar automaticamente se a conexão cair.
                    .build();

                // Listener principal: recebe a atualização de IO ("postIOs") e chama a função para atualizar a UI.
                connection.on("postIOs", (id, valor) => {
                    atualizarElemento(id, valor);
                });

                // Handlers para feedback visual do estado da conexão para o usuário.
                connection.onreconnecting(() => {
                    statusDiv.className = "alert alert-warning alert-status text-center";
                    statusDiv.textContent = "Conexão perdida. Tentando reconectar…";
                });
                connection.onreconnected(() => {
                    statusDiv.className = "alert alert-success alert-status text-center";
                    statusDiv.textContent = "Reconectado com sucesso!";
                });
                connection.onclose(() => {
                    statusDiv.className = "alert alert-danger alert-status text-center";
                    statusDiv.textContent = "Conexão encerrada. Nova tentativa em 5 segundos...";
                    setTimeout(iniciarConexaoSignalR, 5000); // Tenta reiniciar a conexão após 5 segundos.
                });

                // Tenta iniciar a conexão com o servidor.
                try {
                    await connection.start();
                    statusDiv.className = "alert alert-success alert-status text-center";
                    statusDiv.textContent = "Conectado ao servidor em " + new Date().toLocaleTimeString();

                    // Após a conexão ser bem-sucedida, chama a função para gerar todas as tabelas na tela.
                    gerarTabela('containerEntradasDigitais', 'Entradas Digitais', ['Endereço', 'Descrição', 'Status'], entradasDigitais);
                    gerarTabela('containerSaidasDigitais', 'Saídas Digitais', ['Endereço', 'Descrição', 'Status'], saidasDigitais);
                    gerarTabela('containerEntradasAnalogicas', 'Entradas Analógicas', ['Canal', 'Descrição', 'Valor'], entradasAnalogicas);
                    gerarTabela('containerSaidasAnalogicas', 'Saídas Analógicas', ['Canal', 'Descrição', 'Valor'], saidasAnalogicas);
                    gerarTabela('containerEntradasRapidas', 'Entradas Rápidas (HSC)', ['Canal', 'Descrição', 'Valor'], entradasRapidas);

                } catch (err) {
                    console.error("Falha na conexão com o iosHub:", err);
                    statusDiv.className = "alert alert-danger alert-status text-center";
                    statusDiv.textContent = "Falha na conexão. Nova tentativa em 5 segundos.";
                    setTimeout(iniciarConexaoSignalR, 5000); // Tenta novamente se a falha for na inicialização.
                }
            }

            // Inicia todo o processo.
            iniciarConexaoSignalR();
        })();
    </script>
}